// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.basekolo.level.instance;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import com.systemsjr.basekolo.level.instance.vo.LevelInstanceSearchCriteria;
import com.systemsjr.basekolo.level.instance.vo.LevelInstanceVO;

/**
 * @see LevelInstance
 */
public class LevelInstanceDaoImpl
    extends LevelInstanceDaoBase
{
    /**
     * {@inheritDoc}
     */
    protected List handleFindByCriteria(LevelInstanceSearchCriteria searchCriteria)
    {
    	CriteriaBuilder builder = getSession().getCriteriaBuilder();
    	CriteriaQuery<LevelInstance> query = builder.createQuery(LevelInstance.class);
    	Root<LevelInstance> root = query.from(LevelInstance.class);   
		List<Predicate> predicates = new ArrayList<Predicate>(); 	
    	
    	if (searchCriteria.getYear() != null) {
    		predicates.add(builder.equal(root.<Integer>get("year"), searchCriteria.getYear()));
		}
    	
    	if(searchCriteria.getInstanceName() != null){
    		predicates.add(builder.like(root.<String>get("instanceName"), "%" + searchCriteria.getInstanceName() + "%"));
    	}
    	
    	if(searchCriteria.getUniqueCode() != null){
    		predicates.add(builder.like(root.<String>get("uniqueCode"), "%" + searchCriteria.getUniqueCode() + "%"));
    	}
    	
    	if(searchCriteria.getStatus() != null) {
    		predicates.add(builder.equal(root.<String>get("status"), searchCriteria.getStatus()));
    	}

		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		query.orderBy(builder.asc(root.get("uniqueCode")));
		TypedQuery<LevelInstance> typedQuery = getSession().createQuery(query);
        return typedQuery.getResultList();
}

    /**
     * {@inheritDoc}
     */
    public void toLevelInstanceVO(
        LevelInstance source,
        LevelInstanceVO target)
    {
        // TODO verify behavior of toLevelInstanceVO
        super.toLevelInstanceVO(source, target);
        target.setLevel(source.getLevel() == null ? null : getLevelDao().toLevelVO(source.getLevel()));
        /*StudentSearchCriteria criteria = new StudentSearchCriteria();
        criteria.set*/
        
    }

    /**
     * {@inheritDoc}
     */
    public LevelInstanceVO toLevelInstanceVO(final LevelInstance entity)
    {
        // TODO verify behavior of toLevelInstanceVO
        return super.toLevelInstanceVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private LevelInstance loadLevelInstanceFromLevelInstanceVO(LevelInstanceVO levelInstanceVO)
    {
    	LevelInstance instance = LevelInstance.Factory.newInstance();
    	
    	/*if(levelInstanceVO.getId() == null) {
    		instance = LevelInstance.Factory.newInstance();
    	} else {
    		instance = this.get(levelInstanceVO.getId());
    	}*/
    	
    	if(levelInstanceVO.getLevel() != null || levelInstanceVO.getLevel().getId() == null) {
    		instance.setLevel(getLevelDao().levelVOToEntity(levelInstanceVO.getLevel()));
    	} else {
    		instance.setLevel(null);
    	}
    	
    	return instance;
    }

    /**
     * {@inheritDoc}
     */
    public LevelInstance levelInstanceVOToEntity(LevelInstanceVO levelInstanceVO)
    {
        // TODO verify behavior of levelInstanceVOToEntity
        LevelInstance entity = this.loadLevelInstanceFromLevelInstanceVO(levelInstanceVO);
        this.levelInstanceVOToEntity(levelInstanceVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void levelInstanceVOToEntity(
        LevelInstanceVO source,
        LevelInstance target,
        boolean copyIfNull)
    {
        // TODO verify behavior of levelInstanceVOToEntity
        super.levelInstanceVOToEntity(source, target, copyIfNull);
        target.setLevel(getLevelDao().get(source.getLevel().getId()));
    }
}