// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.basekolo.level;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import com.systemsjr.basekolo.level.vo.LevelSearchCriteria;
import com.systemsjr.basekolo.level.vo.LevelVO;

/**
 * @see Level
 */
@Repository
public class LevelDaoImpl
    extends LevelDaoBase
{
    /**
     * {@inheritDoc}
     */
    public void toLevelVO(
        Level source,
        LevelVO target)
    {
        // TODO verify behavior of toLevelVO
        super.toLevelVO(source, target);
        
       if(source.getPreviousLevelId() != null){
        	Level level = this.load(source.getPreviousLevelId());
        	LevelVO prev = new LevelVO();
        	prev.setId(level.getId());
        	prev.setCode(level.getCode());
        	prev.setLevel(level.getLevel());
        	prev.setCreatedAt(level.getCreatedAt());
        	prev.setCreatedBy(level.getCreatedBy());
        	
        	target.setPreviousLevel(prev);
        } 

        if(source.getNextLevelId() != null){
        	Level level = this.load(source.getNextLevelId());
        	LevelVO next = new LevelVO();
        	next.setId(level.getId());
        	next.setCode(level.getCode());
        	next.setLevel(level.getLevel());
        	next.setCreatedAt(level.getCreatedAt());
        	next.setCreatedBy(level.getCreatedBy());
        	
        	target.setNextLevel(next);
        } 
    }

    /**
     * {@inheritDoc}
     */
    public LevelVO toLevelVO(final Level entity)
    {
        // TODO verify behavior of toLevelVO
        return super.toLevelVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Level loadLevelFromLevelVO(LevelVO levelVO)
    {
    	Level level = Level.Factory.newInstance();
    	level.setId(levelVO.getId());
    	
		if(levelVO.getNextLevel() != null && levelVO.getNextLevel().getId() != null) {
				level.setNextLevelId(levelVO.getNextLevel().getId());
		} else {
			level.setNextLevelId(null);
		}
		
		if(levelVO.getPreviousLevel() != null && levelVO.getPreviousLevel().getId() != null) {
			level.setPreviousLevelId(levelVO.getPreviousLevel().getId());
		} else {
			level.setPreviousLevelId(null);
		}
		
    	return level;
    }

    /**
     * {@inheritDoc}
     */
    public Level levelVOToEntity(LevelVO levelVO)
    {
        // TODO verify behavior of levelVOToEntity
        Level entity = this.loadLevelFromLevelVO(levelVO);
        this.levelVOToEntity(levelVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void levelVOToEntity(
        LevelVO source,
        Level target,
        boolean copyIfNull)
    {
        // TODO verify behavior of levelVOToEntity
        super.levelVOToEntity(source, target, copyIfNull);
        if(source.getPreviousLevel() != null && source.getPreviousLevel().getId() != null){
        	target.setPreviousLevelId(source.getPreviousLevel().getId());
        } 
        
        if(source.getNextLevel() != null && source.getNextLevel().getId() != null){        	
        	target.setNextLevelId(source.getNextLevel().getId());
        }
    }

	@Override
	protected List<?> handleFindByCriteria(LevelSearchCriteria searchCriteria) throws Exception {
		// TODO Auto-generated method stub
		CriteriaBuilder builder = getSession().getCriteriaBuilder();
		CriteriaQuery<Level> query = builder.createQuery(Level.class);		
		Root<Level> root = query.from(Level.class);
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if(!StringUtils.isEmpty(searchCriteria.getCode())){
			predicates.add(builder.like(root.<String>get("code"), "%" + searchCriteria.getCode() + "%"));
		}
		
		if(!StringUtils.isEmpty(searchCriteria.getLevel())){
			predicates.add(builder.like(root.<String>get("level"), "%" + searchCriteria.getLevel() + "%"));
		}
		
		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		query.orderBy(builder.asc(root.get("code")));
		TypedQuery<Level> typedQuery = getSession().createQuery(query);
		return typedQuery.getResultList();
	}
}