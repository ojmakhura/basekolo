// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.basekolo.student;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import com.systemsjr.basekolo.level.instance.LevelInstance;
import com.systemsjr.basekolo.level.instance.vo.LevelInstanceVO;
import com.systemsjr.basekolo.student.vo.StudentSearchCriteria;
import com.systemsjr.basekolo.student.vo.StudentVO;

/**
 * @see Student
 */
public class StudentDaoImpl
    extends StudentDaoBase
{
    /**
     * {@inheritDoc}
     */
	protected List<Student> handleFindByCriteria(StudentSearchCriteria searchCriteria)
    {
		CriteriaBuilder builder = getSession().getCriteriaBuilder();
		CriteriaQuery<Student> query = builder.createQuery(Student.class);		
		Root<Student> root = query.from(Student.class);
		List<Predicate> predicates = new ArrayList<Predicate>();
		
    	if(searchCriteria.getFirstName() != null) {
    		predicates.add(builder.like(root.<String>get("firstName"), "%" + searchCriteria.getFirstName() + "%"));
    	}
    	
		if (searchCriteria.getMiddleNames() != null) {
			predicates.add(builder.like(root.<String>get("middleNames"), "%" + searchCriteria.getMiddleNames() + "%"));
		}
		
		if (searchCriteria.getSurname() != null) {
			predicates.add(builder.like(root.<String>get("surname"), "%" + searchCriteria.getSurname() + "%"));
		}
		
		if (searchCriteria.getStudentId() != null) {
			predicates.add(builder.like(root.<String>get("studentId"), searchCriteria.getStudentId()));
		}
		
		if (searchCriteria.getDateOfBirth() != null) {
			predicates.add(builder.equal(root.<Date>get("dateOfBirth"), searchCriteria.getDateOfBirth()));
		}
				
		if (searchCriteria.getBirthCertificate() != null) {
			predicates.add(builder.like(root.<String>get("birthCertificate"), "%" + searchCriteria.getBirthCertificate() + "%"));
		}
		
		if(searchCriteria.getClassId() != null) {
			getLevelInstanceDao().load(searchCriteria.getClassId());
			predicates.add(builder.equal(root.<LevelInstance>get("studentClass"), getLevelInstanceDao().load(searchCriteria.getClassId())));
		}

		if(!predicates.isEmpty()) {
			query.where();
	        Predicate[] pr = new Predicate[predicates.size()];
	        predicates.toArray(pr);
	        query.where(pr); 
		}
		
		query.orderBy(builder.asc(root.get("studentId")));
		TypedQuery<Student> typedQuery = getSession().createQuery(query);
		
        return typedQuery.getResultList();
}

    /**
     * {@inheritDoc}
     */
    public void toStudentVO(
        Student source,
        StudentVO target)
    {
        // TODO verify behavior of toStudentVO
        super.toStudentVO(source, target);
        
        if(source.getStudentClass() != null) {
        	LevelInstanceVO clIns = getLevelInstanceDao().toLevelInstanceVO(source.getStudentClass());       	
        	target.setStudentClass(clIns);
        }       
    }

    /**
     * {@inheritDoc}
     */
    public StudentVO toStudentVO(final Student entity)
    {
        // TODO verify behavior of toStudentVO
        return super.toStudentVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Student loadStudentFromStudentVO(StudentVO studentVO)
    {
    	Student student = Student.Factory.newInstance();
    	    	
    	if(studentVO.getStudentClass() != null) {
    		student.setStudentClass(getLevelInstanceDao().load(studentVO.getStudentClass().getId()));
    	}
        return student;
    }

    /**
     * {@inheritDoc}
     */
    public Student studentVOToEntity(StudentVO studentVO)
    {
        // TODO verify behavior of studentVOToEntity
        Student entity = this.loadStudentFromStudentVO(studentVO);
        this.studentVOToEntity(studentVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void studentVOToEntity(
        StudentVO source,
        Student target,
        boolean copyIfNull)
    {
        // TODO verify behavior of studentVOToEntity
        super.studentVOToEntity(source, target, copyIfNull);
    }

	@Override
	protected List<?> handleFindByClass(Long classId) throws Exception {
		//StudentSearchCriteria criteria = new StudentSearchCriteria();
		//criteria.setClassId(classId);
		return (List<?>) getLevelInstanceDao().load(classId).getClassLists(); //findByCriteria(criteria);
	}

}