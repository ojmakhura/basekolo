// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.basekolo.student;

import java.util.ArrayList;

import com.systemsjr.basekolo.student.vo.StudentRecordVO;
import com.systemsjr.basekolo.student.vo.StudentVO;

/**
 * @see StudentRecord
 */
public class StudentRecordDaoImpl
    extends StudentRecordDaoBase
{
    /**
     * {@inheritDoc}
     */
    public void toStudentRecordVO(
        StudentRecord source,
        StudentRecordVO target)
    {
        // TODO verify behavior of toStudentRecordVO
        super.toStudentRecordVO(source, target);
        // WARNING! No conversion for target.involvedStudents (can't convert source.getInvolvedStudents():com.systemsjr.basekolo.student.Student to com.systemsjr.basekolo.student.vo.StudentVO[]
        if(!source.getInvolvedStudents().isEmpty()) {
        	target.setInvolvedStudents(new ArrayList<StudentVO>());
        	
        	for(Student student : source.getInvolvedStudents()) {
        		target.getInvolvedStudents().add(getStudentDao().toStudentVO(student));
        	}
        }
    }

    /**
     * {@inheritDoc}
     */
    public StudentRecordVO toStudentRecordVO(final StudentRecord entity)
    {
        // TODO verify behavior of toStudentRecordVO
        return super.toStudentRecordVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private StudentRecord loadStudentRecordFromStudentRecordVO(StudentRecordVO studentRecordVO)
    {    	
        StudentRecord studentRecord = StudentRecord.Factory.newInstance();
        /*if (studentRecordVO.getId() == null)
        {
            studentRecord = StudentRecord.Factory.newInstance();
        } else {
        	studentRecord = this.get(studentRecordVO.getId());
        }*/
        
        if(!studentRecordVO.getInvolvedStudents().isEmpty()) {
        	studentRecord.setInvolvedStudents(new ArrayList<Student>());
        	
        	for(StudentVO studentVO : studentRecordVO.getInvolvedStudents()) {
        		studentRecord.getInvolvedStudents().add(getStudentDao().studentVOToEntity(studentVO));
        	}
        }
        
        return studentRecord;
    }

    /**
     * {@inheritDoc}
     */
    public StudentRecord studentRecordVOToEntity(StudentRecordVO studentRecordVO)
    {
        // TODO verify behavior of studentRecordVOToEntity
        StudentRecord entity = this.loadStudentRecordFromStudentRecordVO(studentRecordVO);
        this.studentRecordVOToEntity(studentRecordVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void studentRecordVOToEntity(
        StudentRecordVO source,
        StudentRecord target,
        boolean copyIfNull)
    {
        // TODO verify behavior of studentRecordVOToEntity
        super.studentRecordVOToEntity(source, target, copyIfNull);
    }
}